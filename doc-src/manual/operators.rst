
.. _operators:

Operators
=========


.. index:: unsupported operand type, operators, BaseMatcher, SyntaxError
.. _caveatsandlimitations:

Caveats and Limitations
-----------------------

It is unfortunate, but realistic, that the chapter on operators should start
with some warnings to the user.

Operators --- things like ``&`` and ``|``, used to join matchers --- can help
produce grammars that are easy to read, easier to understand, and so less
likely to contain errors.  But their implementation pushes Python's
boundaries, giving problems with precedence and applicability.  This is
exacerbated by the automatic coercion of strings to `Literal()
<api/redirect.html#lepl.matchers.core.Literal>`_ matchers wherever possible.

For example, because operators are effectively methods on *neighbouring
objects*, the following will fail::

  >>> name = ('Mr' | 'Ms') // Word()
  TypeError: unsupported operand type(s) for |: 'str' and 'str'

This is because neither ``'Mr'`` nor ``'Ms'`` subclass `BaseMatcher
<api/redirect.html#lepl.functions.BaseMatcher>`_ (which is where ``|`` is
defined, via ``__or__`` and ``__ror__``).

Another example, where precedence is not as we might hope::

  >>> name = ('Mr' // Word() > 'man' | 'Ms' // Word() > 'woman')
  SyntaxError: The operator > for And was applied to a matcher (<Or>). Check syntax and parentheses.

because the expression is parsed by Python as::

  >>> name = ('Mr' // Word()) > ('man' | ('Ms' // Word()) > 'woman')

(The SyntaxError here is generated by Lepl, in an attempt to detect this kind
of error before the parser is called; it uses the ABC `Matcher
<api/redirect.html#lepl.matchers.operators.Matcher>`_ to identify functions.  It mentions
`And() <api/redirect.html#lepl.matchers.combine.And>`_ because that is how ``//`` is
implemented.)

In short, then: use operators with care.  Many of the guidelines in the
:ref:`style` chapter are intended to help manage these problems.


.. index:: &, +, /, //, |, %

Binary Operators Between Matchers
---------------------------------

========  ===========
Operator  Description
========  ===========
``&``     Joins matchers in sequence.  The result is a single list containing the results from all functions.  Identical (without separators) to `And() <api/redirect.html#lepl.matchers.combine.And>`_.
--------  -----------
``+``     As ``&``, but the results are then joined together with the standard
          Python ``+`` operator.
--------  -----------
``/``     As ``&``, but with optional spaces (0 or more) between functions.
          If no space is found, no result is added, otherwise any found
          spaces are joined together into a single result.
--------  -----------
``//``    As ``&``, but with required spaces (1 or more) between functions.
          The spaces are joined together into a single result.
--------  -----------
``|``     Matches one matcher from a list.  The result is the result of the
          chosen matcher.  Identical to 
          `Or() <api/redirect.html#lepl.matchers.combine.And>`_.
--------  -----------
``%``     As ``|``, but without backtracking between functions.  
          Identical to `First() <api/redirect.html#lepl.matchers.First>`_.
========  ===========

For a discussion of backtracking see :ref:`backtracking`.


.. index:: ~, []

Prefix And Postfix Operators On Matchers
----------------------------------------

========  ===========
Operator  Description
========  ===========
``~``     Discards the result from the matcher. 
          Identical to `Drop() <api/redirect.html#lepl.matchers.combine.And>`_.

--------  -----------
``[]``    Repeats the matcher, with optional concatenation and separator.
          Identical to (without separators) `Repeat() <api/redirect.html#lepl.functions.Repeat>`_.
========  ===========

.. note:

  `Lookahead() <api/redirect.html#lepl.matchers.combine.And>`_ is an exception for
  ``~`` (see :ref:`lookahead`).


.. index:: >=, >, >>, **, ^, args()
.. _ge:

Operators That Apply Functions To Results
-----------------------------------------

========  ===========
Operator  Description
========  ===========
``>=``    Pass the results of the matcher (left) to the given function (right) and use the result as the new result.  Identical to `Apply(raw=True) <api/redirect.html#lepl.functions.Apply>`_.
--------  -----------
``>``     Pass the results of the matcher (left) to the given function 
          (right) and use the result, *within a new list*,  as the result.
          If the function is a string a ``(string, result)`` pair is 
          generated instead.  
          Identical to `Apply() <api/redirect.html#lepl.functions.Apply>`_.
--------  -----------
``args``  Not an operator, but used with ``>`` to expand the list of results
          to be arguments (like Python's ``*args`` convention).  For
          example ``> args(myFunc)`` invokes ``myFunc(*results)``.
--------  -----------
``>>``    As ``>``, but the function is applied to each result in turn 
          (instead of all results being supplied in a single list argument).
          Identical to `Map() <api/redirect.html#lepl.functions.Map>`_.
--------  -----------
``**``    As ``>``, but the results are passed as the named parameter 
          *results*.  Additional keyword arguments are *stream_in* (the
          stream passed to the matcher), *stream_out* (the stream returned
          from the matcher) and *core* (see :ref:`resources`).  
          Identical to `KApply() <api/redirect.html#lepl.functions.KApply>`_.
--------  -----------
``^``     Raise a Syntax error.  The argument to the right is a string that
          is treated as a format template for the same named arguments as 
          ``**``.
========  ===========


.. _replacement:

Replacement
-----------

Operators can be replaced inside a ``with`` context using `Override()
<api/redirect.html#lepl.custom.Override>`_::

  >>> with Override(or_=And, and_=Or):
  >>>     abcd = (Literal('a') & Literal('b')) | ( Literal('c') & Literal('d'))
  >>>     print(abcd.parse_string('ac'))
  ['a', 'c']
  >>>     print(abcd.parse_string('ab'))
  None

(think about it).

It is also possible to provide a separator that is used for ``&`` and ``[]``.
With a little care (define matchers for characters before, and matchers for
sentences after, the *with* statement) this can handle the common case of
space--separated words in a transparent manner:

  >>> word = Letter()[:,...]
  >>> with Separator(r'\s+'):
  >>>     sentence = word[1:]
  >>> sentence.parse_string('hello world')
  ['hello', ' ', 'world']

Note that there was no need to specify a separator in ``word[1:]``, and that
this the argument of `Separator() <api/redirect.html#lepl.matchers.operators.Separator>`_ is a rare example of a string being
coerced to something other than a `Literal()
<api/redirect.html#lepl.matchers.core.Literal>`_ (here `Regexp()
<api/redirect.html#lepl.matchers.Regexp>`_ is used).

The use of separators to handle spaces is discussed in more detail below.


.. index:: Separator(), SmartSeparator1(), SmartSeparator2()
.. _spaces:

Spaces
------

There's a wide variety of ways to handle spaces in Lepl.  A large part of the
:ref:`Tutorial <tutorial>` is spent discussing this, and it's probably the
first place to look for a basic understanding.

The main conclusion of the :ref:`Tutorial <tutorial>` is that the :ref:`lexer`
(ie using `Token() <api/redirect.html#lepl.lexer.matchers.Token>`_) is the best approach in most circumstances.  It usually
hits the sweet spot between flexibility and simplicity.

But sometimes tokens are not the right solution.  One case is
:ref:`table_example`, when the `Columns() <api/redirect.html#lepl.matchers.Columns>`_ matcher is a good fit.  Another
is when spaces are *required*.

It is something of a "beginner's mistake" to enforce the use of spaces in the
grammar --- it makes the parsing more complex (and more fragile, even to
"good" input), and typically doesn't help the end user much.  But even so, it
is sometimes necessary.

In such cases, the only real solution is to specify all the spaces.  One
option is to use the ``\`` and ``\\`` operators (which match zero-- and
one--or--more spaces respectively).  Alternatively, to give more control, Lepl
includes various *separators*.  The :ref:`Tutorial <separators>` introduced
the basic `Separator() <api/redirect.html#lepl.matchers.operators.Separator>`_ (as
described in the previous section, above), which requires a user--specified
space wherever `&` is used (and also in `[]` repetition).  But even this is
often not sufficent when optional matchers are used, because the spaces remain
even when the optional matcher is ignored.

So, to help automate the (rare) case of *required* spaces, *automatic*
addition of spaces for each `&`, and *optional* matchers, two "smart"
separators are also available.  The first, `SmartSeparator1() <api/redirect.html#lepl.matchers.operators.SmartSeparator1>`_, checks
whether a matcher is used by seeing whether it consumes input; spaces are only
added when `&` is between two matchers that both "move along" the input
stream.  The second, `SmartSeparator2() <api/redirect.html#lepl.contrib.matchers.SmartSeparator2>`_, takes a more pro--active approach
and examines the matchers to see whether they inherit from the base class used
in Lepl to implement "optionality".

All separators are implemented using :ref:`operator replacement
<replacement>`, described above.

If you really, really need such functionality, the best thing to do is try
these various separators and see which has the behaviour you require (but
please first consider whether you absolutely need to check that spaces are
present, or whether you can do what you want more simply and reliably with the
:ref:`lexer`).

The following tables show the results of some simple tests for different
separators, spaces, and functions.  They also illustrate two separate, but
related, issues: the difference between `And() <api/redirect.html#lepl.matchers.combine.And>`_ and ``&`` when separators
are present; and how matchers like `Eos() <api/redirect.html#lepl.functions.Eos>`_ function (which is not optional,
but consumes no input).


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Optional('a') & Optional('b')                                                                                                                                                                 |
+----------+-----------------------------------------------------------+-----------------------------------------------------------+-----------------------------------------------------------+
|          |Separator                                                  |SmartSeparator1                                            |SmartSeparator2                                            |
|          +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
|          |And(..., Eos())              |... & Eos()                  |And(..., Eos())              |... & Eos()                  |And(..., Eos())              |... & Eos()                  |
|          +--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|          |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |
+==========+==============+==============+==============+==============+==============+==============+==============+==============+==============+==============+==============+==============+
|'a b '    |              |              |yes           |yes           |              |              |              |              |              |              |yes           |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'a b'     |yes           |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'ab'      |              |yes           |              |yes           |              |yes           |              |yes           |              |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|' b'      |yes           |yes           |              |yes           |              |              |              |              |              |              |              |              |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'b'       |              |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'a '      |yes           |yes           |              |yes           |              |              |              |              |              |              |yes           |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'a'       |              |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|''        |              |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |yes           |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|' '       |yes           |yes           |              |yes           |              |              |              |              |              |              |              |              |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+


Each table has a "yes" when the parser (at the top of the table) matchers the
input stream (on the left).  Pay careful attention to spaces in the input.

Different columns of results correspond to the different spearators, whether
they are matching a single space or "zero or more" spaces, and whether the
final `Eos() <api/redirect.html#lepl.functions.Eos>`_ matcher is added with ``&`` (which will include the spaces
from the separator) or `And() <api/redirect.html#lepl.matchers.combine.And>`_ (which won't).

So, for example, the final column on the right, below, has results for this
parser::

    with SmartSeparator2(Literal(' ')[:]):
        parser = Optional('a') & Optional('b') & 'c' & Eos()

(where ``Literal( )`` is missing from the column heading to save space).


+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|Optional('a') & Optional('b') & 'c'                                                                                                                                                           |
+----------+-----------------------------------------------------------+-----------------------------------------------------------+-----------------------------------------------------------+
|          |Separator                                                  |SmartSeparator1                                            |SmartSeparator2                                            |
|          +-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+-----------------------------+
|          |And(..., Eos())              |... & Eos()                  |And(..., Eos())              |... & Eos()                  |And(..., Eos())              |... & Eos()                  |
|          +--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|          |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |' '           |' '[:]        |
+==========+==============+==============+==============+==============+==============+==============+==============+==============+==============+==============+==============+==============+
|'a b c '  |              |              |yes           |yes           |              |              |              |              |              |              |yes           |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'a b c'   |yes           |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|' b c'    |yes           |yes           |              |yes           |              |              |              |              |              |              |              |              |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'b c'     |              |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'ab c'    |              |yes           |              |yes           |              |yes           |              |yes           |              |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'a c'     |              |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'a  c'    |yes           |yes           |              |yes           |              |yes           |              |yes           |              |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|'c'       |              |yes           |              |yes           |yes           |yes           |yes           |yes           |yes           |yes           |              |yes           |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+
|' c'      |              |yes           |              |yes           |              |              |              |              |              |              |              |              |
+----------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+--------------+

